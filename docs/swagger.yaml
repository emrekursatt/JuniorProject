basePath: /api
definitions:
  models.TaskEntity:
    properties:
      code:
        type: string
      description:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  models.UserEntity:
    properties:
      email:
        type: string
      password:
        type: string
      phoneNumber:
        type: integer
      userName:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server Petstore server.
  title: Swagger Example API
  version: v1
paths:
  /task/create:
    post:
      consumes:
      - application/json
      description: add by json task
      parameters:
      - description: Add Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskEntity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskEntity'
      summary: Add a new task
      tags:
      - tasks
  /task/delete:
    delete:
      consumes:
      - application/json
      description: delete task by code
      parameters:
      - description: Task Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskEntity'
      summary: Delete a task
      tags:
      - tasks
  /task/getAll:
    get:
      consumes:
      - application/json
      description: add by json task
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TaskEntity'
            type: array
      summary: Add a new task
      tags:
      - tasks
  /task/update:
    put:
      consumes:
      - application/json
      description: update task by code
      parameters:
      - description: Task Code
        in: query
        name: code
        required: true
        type: string
      - description: Update Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskEntity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskEntity'
      summary: Update a task
      tags:
      - tasks
  /user/delete:
    delete:
      consumes:
      - application/json
      description: delete user by userName
      parameters:
      - description: Delete UserName
        in: query
        name: userName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserEntity'
      summary: Delete a User
      tags:
      - users
  /user/getAll:
    get:
      consumes:
      - application/json
      description: add by json user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserEntity'
      summary: Add a new user
      tags:
      - users
  /user/login:
    post:
      consumes:
      - application/json
      description: add by json user
      parameters:
      - description: Update User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserEntity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserEntity'
      summary: Add a new user
      tags:
      - users
  /user/register:
    post:
      consumes:
      - application/json
      description: add by json user
      parameters:
      - description: Add User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserEntity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserEntity'
      summary: Add a new user
      tags:
      - users
  /user/update:
    put:
      consumes:
      - application/json
      description: update user by userName
      parameters:
      - description: User UserName
        in: query
        name: userName
        required: true
        type: string
      - description: Update UserName
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserEntity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserEntity'
      summary: Update a user
      tags:
      - users
swagger: "2.0"
